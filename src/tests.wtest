//import entities.*
//import attack.*
//import scenario.*
//import directions.*
//import items.*
//import config.*
//import movements.*
//import positions.*
//import targets.* 

//describe "Ataques y Movimientos de personaje" {
	
//	const easyEnemyFactory = new EnemyFactory(healthPoints = 150, damagePoints = 10)
//	var easyEnemy = easyEnemyFactory.createEnemy()
	
//	const enemy = new Enemy(health = 150, mainAttack = new Attack(damagePoints = 25, strength = 1), specialAttack = new Attack(damagePoints = 50, strength = 2))
	
//	test "Cuando capybaraPlayer ataca con mainAttack a un enemigo, le quita 15 puntos de vida" {
//		capybaraPlayer.mainAttack().hit(easyEnemy)
//		capybaraPlayer.mainAttack().execute(easyEnemy)
//		assert.equals(135, easyEnemy.health())
//	}

//	test "Cuando un enemigo ataca con mainAttack a capybaraPlayer, le quita 10 puntos de vida" {
//		easyEnemy.mainAttack().hit(capybaraPlayer)
//		assert.equals(185, capybaraPlayer.health())
//	}

//	test "Cuando capybaraPlayer ataca con specialAttack a un enemigo, le quita 45 puntos de vida" {
//		capybaraPlayer.specialAttack().hit(easyEnemy)
//		assert.equals(105, easyEnemy.health())
//	}
//	
//	test "Cuando un enemigo ataca con specialAttack a capybaraPlayer, le quita 30 puntos de vida" {
//		easyEnemy.specialAttack().hit(capybaraPlayer)
//		assert.equals(170, capybaraPlayer.health())
//	}
////test "Cuando capybaraPlayer esquiva un ataque de un enemigo, le quita 0 puntos de health" {
////	capybaraPlayer.crouch()
////	assert.equals(150, capybaraPlayer.health())
////}

////test "Cuando capybaraPlayer esquiva un ataque de un enemigo, le quita 0 puntos de health" {
//      easyEnemy.throwAttack(mainAttack,left)
////	capybaraPlayer.crouch()
////	assert.equals(150, capybaraPlayer.health())
////}

////	
////test "Cuando un enemigo esquiva un ataque de capybaraPlayer, le quita 0 puntos de health" {
////	easyEnemy.crouch()
////	assert.equals(200,easyEnemy.health())
////}

////test "Cuando un enemigo esquiva un ataque de capybaraPlayer, le quita 0 puntos de health" {
////    capybaraPlayer.throwAttack(mainAttack,right)
////	easyEnemy.crouch()
////	assert.equals(200,easyEnemy.health())
////}
//}




////describe "Items " {
////		
////	const easyEnemyFactory = new EnemyFactory(healthPoints = 150, damagePoints = 10)
////	var easyEnemy = easyEnemyFactory.createEnemy()
////	var heart =  new Heart(healthPoints = 50 )
////	var mate = new Matienzo (healthPoints = 100 damagePoints = 50)
////	
////	method initialize(){
////		juego.appearRandomItem()
////	}
////		
////	test "capybaraPlayer agarra heart cuando recibe ataques  de un enemy " {
////		easyEnemy.mainAttack().hit(capybaraPlayer)
////		easyEnemy.specialAttack().hit(capybaraPlayer)
////		capybaraPlayer.collideWithItem(heart)
////		assert.equals(190, capybaraPlayer.health())
////	}
////
////	test "capybaraPlayer agarra Matienzo y aumenta su vida cuando recibe atques de un enemy {
////		easyEnemy.specialAttack().hit(capybaraPlayer)
////		easyEnemy.specialAttack().hit(capybaraPlayer)
////		capybaraPlayer.colllideWithItem(mate)
////		assert.equals(200, capybaraPlayer.health())
////	}
////	test "capybaraPlayer agarra Matienzo y aumenta su danio  {
////		capybaraPlayer.collideWithItem(mate)
////		assert.equals(65, capybaraPlayer.damagePoints())
////		capybaraPlayer.mainAttack().hit(easyEnemy)	
////		assert.equals(70, easyEnemy.healthpoints())				
////	}
////}
