import entities.*
import attack.*
import scenario.*
import directions.*
import items.*
import config.*
import movements.*
import targets.* 
import sounds.*
import wollok.game.*

describe "Ataques y Movimientos de personaje" {
	
	const easyEnemyFactory = new EnemyFactory(healthPoints = 150, damagePoints = 10)
	var easyEnemy = easyEnemyFactory.createEnemy()
	
	method initialize() {
		capybaraPlayer.position(game.at(0,4))
		easyEnemy.position(game.at(27,4))
		
		const playerUpperTarget = new UpperTarget(entity = capybaraPlayer)
		const playerMiddleTarget = new MiddleTarget(entity = capybaraPlayer)
		
		const enemyUpperTarget = new UpperTarget(entity = easyEnemy)
		const enemyMiddleTarget = new MiddleTarget(entity = easyEnemy)
		
		const playerTargets = #{playerUpperTarget, playerMiddleTarget}
		const enemyTargets = #{enemyUpperTarget, enemyMiddleTarget}
		
		capybaraPlayer.upperTarget(playerUpperTarget)
		easyEnemy.upperTarget(enemyUpperTarget)
		
		playerTargets.forEach({target =>
			game.addVisual(target)
			general.hit(target, capybaraPlayer)
		})
		
		enemyTargets.forEach({target =>
			game.addVisual(target)
			general.hit(target, easyEnemy)
		})
		
		soundProducer.provider(soundProviderMock)
	}
	
	test "Un enemigo recibe un mainAttack del jugador" {
		capybaraPlayer.mainAttack().giveDamage(easyEnemy)
		assert.equals(135, easyEnemy.health())
	}

	test "El jugador recibe un mainAttack de un enemigo" {
		easyEnemy.mainAttack().giveDamage(capybaraPlayer)
		assert.equals(190, capybaraPlayer.health())
	}

	test "Un enemigo recibe un specialAttack del jugador" {
		capybaraPlayer.specialAttack().giveDamage(easyEnemy)
		assert.equals(105, easyEnemy.health())
	}
	
	test "El jugador recibe un specialAttack de un enemigo" {
		easyEnemy.specialAttack().giveDamage(capybaraPlayer)
		assert.equals(170, capybaraPlayer.health())
	}
	
//	test "El jugador salta y esquiva un ataque" {
//		easyEnemy.throwAttack(easyEnemy.mainAttack(), left)
//		capybaraPlayer.jump()
//		assert.equals(200, capybaraPlayer.health())
//	}
	
	test "El jugador se agacha y esquiva un ataque" {
		capybaraPlayer.crouch()
		assert.that(not game.hasVisual(capybaraPlayer.upperTarget()))
	}

	test "Un enemigo se agacha y esquiva un ataque" {
		easyEnemy.crouch()
		assert.that(not game.hasVisual(easyEnemy.upperTarget()))
	}

}


describe "Items " {
		
	const easyEnemyFactory = new EnemyFactory(healthPoints = 150, damagePoints = 10)
	var easyEnemy = easyEnemyFactory.createEnemy()
	var heart =  new Heart(healthPoints = 50 )
	var matienzo = new Matienzo (damagePoints = 50)
	
	method initialize(){
		soundProducer.provider(soundProviderMock)
	}
		
	test "El jugador da침ado recolecta un coraz칩n" {
		capybaraPlayer.health(150)
		heart.giveEffect(capybaraPlayer)
		assert.equals(200, capybaraPlayer.health())
	}
	
	test "El jugador con su salud al m치ximo recolecta un coraz칩n" {
		heart.giveEffect(capybaraPlayer)
		assert.equals(200, capybaraPlayer.health())
	}
	
	test "El jugador recolecta un matienzo" {
		matienzo.giveEffect(capybaraPlayer)
		assert.equals(65, capybaraPlayer.damagePoints())
	}
	
}
